# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NIo8tMfd3SeZbP5pF1WcrrO7Kb59e3JE
"""

#Mounting with Google Drive
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
data = pd.read_csv('/content/drive/My Drive/datasets/ad.csv')

print(data.shape)
print(data.head())

data["age"].min()
data["age"].max()

data['age'] = np.where(data['age'].between(16,20), 1, data['age'])
data['age'] = np.where(data['age'].between(21,30), 2, data['age'])
data['age'] = np.where(data['age'].between(31,40), 3, data['age'])
data['age'] = np.where(data['age'].between(41,50), 4, data['age'])
data['age'] = np.where(data['age'].between(51,60), 5, data['age'])
data['age'] = np.where(data['age'].between(61,70), 6, data['age'])
data['age'] = np.where(data['age'].between(71,80), 7, data['age'])
data['age'] = np.where(data['age'].between(81,90), 8, data['age'])

print(data)
data['age'].astype(int)

data['workclass'].replace(to_replace ="?",  value ="0", inplace = True) 
data['workclass'].replace(to_replace ="Private",  value ="1", inplace = True) 
data['workclass'].replace(to_replace ="Local-gov",  value ="2", inplace = True) 
data['workclass'].replace(to_replace ="Self-emp-not-inc",  value ="3", inplace = True) 
data['workclass'].replace(to_replace ="Self-emp-inc",  value ="4", inplace = True) 
data['workclass'].replace(to_replace ="Federal-gov",  value ="5", inplace = True) 
data['workclass'].replace(to_replace ="Local-gov",  value ="6", inplace = True) 
data['workclass'].replace(to_replace ="State-gov",  value ="7", inplace = True) 
data['workclass'].replace(to_replace ="Without-pay",  value ="8", inplace = True) 
data['workclass'].replace(to_replace ="Never-worked",  value ="9", inplace = True) 

print(data)
data['workclass'].astype(int)

data['education'].replace(to_replace ="Bachelors",  value ="1", inplace = True) 

data['education'].replace(to_replace ="Some-college",  value ="2", inplace = True) 

data['education'].replace(to_replace ="11th",  value ="3", inplace = True) 

data['education'].replace(to_replace ="HS-grad",  value ="4", inplace = True) 

data['education'].replace(to_replace ="Prof-school",  value ="5", inplace = True) 

data['education'].replace(to_replace ="Assoc-acdm",  value ="6", inplace = True) 

data['education'].replace(to_replace ="Assoc-voc",  value ="7", inplace = True) 

data['education'].replace(to_replace ="9th",  value ="8", inplace = True) 

data['education'].replace(to_replace ="7th-8th",  value ="9", inplace = True) 

data['education'].replace(to_replace ="12th",  value ="10", inplace = True) 

data['education'].replace(to_replace ="Masters",  value ="11", inplace = True) 

data['education'].replace(to_replace ="1st-4th",  value ="12", inplace = True) 

data['education'].replace(to_replace ="10th",  value ="13", inplace = True) 

data['education'].replace(to_replace ="Doctorate",  value ="14", inplace = True) 

data['education'].replace(to_replace ="5th-6th",  value ="15", inplace = True) 

data['education'].replace(to_replace ="Preschool",  value ="16", inplace = True) 
  
print(data['education'])
data['education'].astype(int)

data["educational-num"].min()
data["educational-num"].max()

data['educational-num'] = np.where(data['educational-num'].between(1,5), 1, data['educational-num'])
data['educational-num'] = np.where(data['educational-num'].between(6,10), 2, data['educational-num'])
data['educational-num'] = np.where(data['educational-num'].between(11,16), 3, data['educational-num'])
print(data)
data['educational-num'].astype(int)

data['marital-status'].replace(to_replace ="Married-civ-spouse",  value ="1", inplace = True) 
data['marital-status'].replace(to_replace ="Divorced",  value ="2", inplace = True) 
data['marital-status'].replace(to_replace ="Never-married",  value ="3", inplace = True) 
data['marital-status'].replace(to_replace ="Separated",  value ="4", inplace = True) 
data['marital-status'].replace(to_replace ="Widowed",  value ="5", inplace = True) 
data['marital-status'].replace(to_replace ="Married-spouse-absent",  value ="6", inplace = True) 
data['marital-status'].replace(to_replace ="Married-AF-spouse",  value ="7", inplace = True) 

print(data)
data['marital-status'].astype(int)

data['occupation'].replace(to_replace ="?",  value ="0", inplace = True) 
data['occupation'].replace(to_replace ="Tech-support",  value ="1", inplace = True) 
data['occupation'].replace(to_replace ="Craft-repair",  value ="2", inplace = True) 
data['occupation'].replace(to_replace ="Other-service",  value ="3", inplace = True) 
data['occupation'].replace(to_replace ="Sales",  value ="4", inplace = True) 
data['occupation'].replace(to_replace ="Exec-managerial",  value ="5", inplace = True) 
data['occupation'].replace(to_replace ="Prof-specialty",  value ="6", inplace = True) 
data['occupation'].replace(to_replace ="Handlers-cleaners",  value ="7", inplace = True) 
data['occupation'].replace(to_replace ="Machine-op-inspct",  value ="8", inplace = True) 
data['occupation'].replace(to_replace ="Adm-clerical",  value ="9", inplace = True) 
data['occupation'].replace(to_replace ="Farming-fishing",  value ="10", inplace = True) 
data['occupation'].replace(to_replace ="Transport-moving",  value ="11", inplace = True) 
data['occupation'].replace(to_replace ="Priv-house-serv",  value ="12", inplace = True) 
data['occupation'].replace(to_replace ="Protective-serv",  value ="13", inplace = True) 
data['occupation'].replace(to_replace ="Armed-Forces",  value ="14", inplace = True) 


print(data['occupation'])


data['occupation'].astype(int)

data['relationship'].replace(to_replace ="Wife",  value ="1", inplace = True) 
data['relationship'].replace(to_replace ="Own-child",  value ="2", inplace = True) 
data['relationship'].replace(to_replace ="Husband",  value ="3", inplace = True) 
data['relationship'].replace(to_replace ="Not-in-family",  value ="4", inplace = True) 
data['relationship'].replace(to_replace ="Other-relative",  value ="5", inplace = True) 
data['relationship'].replace(to_replace ="Unmarried",  value ="6", inplace = True) 


print(data['relationship'])
data['relationship'].astype(int)

data['race'].replace(to_replace ="White",  value ="1", inplace = True)  
data['race'].replace(to_replace ="Asian-Pac-Islander",  value ="2", inplace = True) 
data['race'].replace(to_replace ="Amer-Indian-Eskimo",  value ="3", inplace = True) 
data['race'].replace(to_replace ="Other",  value ="4", inplace = True) 
data['race'].replace(to_replace ="Black",  value ="5", inplace = True) 
        
    
print(data['race'])

data["hours-per-week"].max()

data['gender'].replace(to_replace ="Male",  value ="0", inplace = True)
data['gender'].replace(to_replace ="Female",  value ="1", inplace = True)

print(data["gender"])
data['gender'].astype(int)

data['capital-gain'] = np.where(data['capital-gain'].between(0,50000), 1, data['capital-gain'])
data['capital-gain'] = np.where(data['capital-gain'].between(50001,99999), 2, data['capital-gain'])
print(data["capital-gain"])
data['capital-gain'].astype(int)

data['capital-loss'] = np.where(data['capital-loss'].between(0,1000), 1, data['capital-loss'])
data['capital-loss'] = np.where(data['capital-loss'].between(1001,2000), 2, data['capital-loss'])
data['capital-loss'] = np.where(data['capital-loss'].between(2001,3000), 3, data['capital-loss'])
data['capital-loss'] = np.where(data['capital-loss'].between(3001,5000), 4, data['capital-loss'])
print(data["capital-loss"])
data['capital-loss'].astype(int)

data['hours-per-week'] = np.where(data['hours-per-week'].between(0,30), 1, data['hours-per-week'])
data['hours-per-week'] = np.where(data['hours-per-week'].between(31,60), 2, data['hours-per-week'])
data['hours-per-week'] = np.where(data['hours-per-week'].between(61,90), 3, data['hours-per-week'])
data['hours-per-week'] = np.where(data['hours-per-week'].between(91,99), 4, data['hours-per-week'])
print(data["hours-per-week"])
data['hours-per-week'].astype(int)

data['native-country'].replace(to_replace ="United-States",  value ="0", inplace = True)
data['native-country'].replace(to_replace ="Cambodia",  value ="1", inplace = True)
data['native-country'].replace(to_replace ="England",  value ="2", inplace = True)
data['native-country'].replace(to_replace ="Puerto-Rico",  value ="3", inplace = True)
data['native-country'].replace(to_replace ="Canada",  value ="4", inplace = True)
data['native-country'].replace(to_replace ="Germany",  value ="5", inplace = True)
data['native-country'].replace(to_replace ="Outlying-US(Guam-USVI-etc)",  value ="6", inplace = True)
data['native-country'].replace(to_replace ="India",  value ="7", inplace = True)
data['native-country'].replace(to_replace ="Japan",  value ="8", inplace = True)
data['native-country'].replace(to_replace ="Greece",  value ="9", inplace = True)
data['native-country'].replace(to_replace ="South",  value ="10", inplace = True)
data['native-country'].replace(to_replace ="China",  value ="11", inplace = True)
data['native-country'].replace(to_replace ="Cuba",  value ="12", inplace = True)
data['native-country'].replace(to_replace ="Iran",  value ="13", inplace = True)
data['native-country'].replace(to_replace ="Honduras",  value ="14", inplace = True)
data['native-country'].replace(to_replace ="Philippines",  value ="15", inplace = True)
data['native-country'].replace(to_replace ="Italy",  value ="16", inplace = True)
data['native-country'].replace(to_replace ="Poland",  value ="17", inplace = True)
data['native-country'].replace(to_replace ="Jamaica",  value ="18", inplace = True)
data['native-country'].replace(to_replace ="Vietnam",  value ="19", inplace = True)
data['native-country'].replace(to_replace ="Mexico",  value ="20", inplace = True)
data['native-country'].replace(to_replace ="Portugal",  value ="21", inplace = True)
data['native-country'].replace(to_replace ="Ireland",  value ="22", inplace = True)
data['native-country'].replace(to_replace ="France",  value ="23", inplace = True)
data['native-country'].replace(to_replace ="Dominican-Republic",  value ="24", inplace = True)
data['native-country'].replace(to_replace ="Laos",  value ="25", inplace = True)
data['native-country'].replace(to_replace ="Ecuador",  value ="26", inplace = True)
data['native-country'].replace(to_replace ="Taiwan",  value ="27", inplace = True)
data['native-country'].replace(to_replace ="Haiti",  value ="28", inplace = True)
data['native-country'].replace(to_replace ="Columbia",  value ="29", inplace = True)
data['native-country'].replace(to_replace ="Hungary",  value ="30", inplace = True)
data['native-country'].replace(to_replace ="Guatemala",  value ="31", inplace = True)
data['native-country'].replace(to_replace ="Nicaragua",  value ="32", inplace = True)
data['native-country'].replace(to_replace ="Scotland",  value ="33", inplace = True)
data['native-country'].replace(to_replace ="Thailand",  value ="34", inplace = True)
data['native-country'].replace(to_replace ="Yugoslavia",  value ="35", inplace = True)
data['native-country'].replace(to_replace ="El-Salvador",  value ="36", inplace = True)
data['native-country'].replace(to_replace ="Trinadad&Tobago",  value ="37", inplace = True)
data['native-country'].replace(to_replace ="Peru",  value ="38", inplace = True)
data['native-country'].replace(to_replace ="Hong",  value ="39", inplace = True)
data['native-country'].replace(to_replace ="Holand-Netherlands",  value ="40", inplace = True)
data['native-country'].replace(to_replace ="?",  value ="41", inplace = True)

print(data['native-country'])

data['native-country'].astype(int)

data['income'].replace(to_replace ="<=50K",  value ="0", inplace = True)
data['income'].replace(to_replace =">50K",  value ="1", inplace = True)
data['income'].astype(int)

print(data.shape)
print(data.head())
X = data.drop('income',axis=1)
Y = data['income']


from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.20)

from sklearn.naive_bayes import GaussianNB
clf = GaussianNB()
clf.fit(X_train, Y_train)
Y_pred = clf.predict(X_test)
print(Y_pred)

from sklearn.metrics import classification_report, confusion_matrix
print(confusion_matrix(Y_test,Y_pred))
print(classification_report(Y_test,Y_pred))
print ()
from sklearn.neighbors import KNeighborsClassifier
neigh = KNeighborsClassifier()
neigh.fit(X_train, Y_train)
Y_pred = neigh.predict(X_test)
print(Y_pred)
from sklearn.metrics import classification_report, confusion_matrix
print(confusion_matrix(Y_test, Y_pred))
print(classification_report (Y_test, Y_pred))